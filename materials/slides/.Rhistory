row_spec(c(3, 6), extra_css = "border-bottom: 20px solid white;")
sched[1:9, c(1, 5)]
sched[1:9, c(1, 5)] |>
dplyr::mutate(ss = c("", "", "💻", "", "", "💻", "", "💡", "💻")) |>
dplyr::select(ss, everything()) |>
kable(format = "html") |>
kable_styling(full_width = T) |>
row_spec(c(1,2, 4, 5, 7, 8), bold = T, color = "green") |>
row_spec(c(3, 6), extra_css = "border-bottom: 20px solid white;")
library(readxl)
library(knitr)
library(magrittr)
library(kableExtra)
sched <- read_xlsx("docs/schedule2024.xlsx")
tab <- sched[1:9, c(1, 5)] |>
dplyr::mutate(ss = c("", "", "💻", "", "", "💻", "", "💡", "💻")) |>
dplyr::select(ss, everything())
colnames(tab) <- c("", "Date", "Topic")
tab <-
kable(format = "html") |>
kable_styling(full_width = T) |>
row_spec(c(1,2, 4, 5, 7, 8), bold = T, color = "green") |>
row_spec(c(3, 6), extra_css = "border-bottom: 20px solid white;")
sched <- read_xlsx("docs/schedule2024.xlsx")
tab <- sched[1:9, c(1, 5)] |>
dplyr::mutate(ss = c("", "", "💻", "", "", "💻", "", "💡", "💻")) |>
dplyr::select(ss, everything())
colnames(tab) <- c("", "Date", "Topic")
tab <- tab |>
kable(format = "html") |>
kable_styling(full_width = T) |>
row_spec(c(1,2, 4, 5, 7, 8), bold = T, color = "green") |>
row_spec(c(3, 6), extra_css = "border-bottom: 20px solid white;")
tab
xaringan::inf_mr(cast_from = '../..')
tab
tab <- sched[12:15, c(1, 5)] |>
dplyr::mutate(ss = c("", "", "💻", "💡")) |>
dplyr::select(ss, everything())
colnames(tab) <- c("", "Date", "Topic")
tab |>
kable(format = "html") |>
kable_styling(full_width = T) |>
row_spec(c(1,2), bold = T, color = "green") |>
row_spec(c(3), extra_css = "border-bottom: 20px solid white;")
sched
sched
tab <- sched[18:nrow(sched), c(1, 5)] |>
dplyr::mutate(ss = c("", "", "💻", "🎁")) |>
dplyr::select(ss, everything())
colnames(tab) <- c("", "Date", "Topic")
tab |>
kable( format = "html") |>
kable_styling(full_width = T) |>
row_spec(c(2, 3, 4), bold = T, color = "green") |>
row_spec(c(2, 3, 5), extra_css = "border-bottom: 25px solid white;")
xaringan::inf_mr(cast_from = '../..')
xaringan::inf_mr(cast_from = '../..')
xaringan::inf_mr(cast_from = '../..')
xaringan::inf_mr(cast_from = '../..')
xaringan::inf_mr(cast_from = '../..')
xaringan::inf_mr(cast_from = '../..')
# This code is based on Christopher Gandrud's Shiny examples:
# https://github.com/christophergandrud/datafest2017_dashboard_shiny/tree/3256125240d09bac933ed359c879036fcbeb9be5
# Load required packages. Install if needed.
library(flexdashboard)
library(gsheet)
library(ggmap)
library(dplyr)
library(leaflet)
library(sp)
library(rworldmap)
library(networkD3)
library(geosphere)
library(plotly)
library(shiny)
# fix vars
#  API key needed here
# KEY <- readLines("../../admin/2021/keys/datahandling_survey_static.txt") # key UM
KEY <- "AIzaSyASzCqktyaJwksvy9Oi3i50gHKuiAFOP5g"
# Download survey data
# Download data
URL <- 'https://docs.google.com/spreadsheets/d/13jZFfQHdqN5fI4PqGZZCvHGSgPbDPKBhdSmQ4WClyME/edit?gid=0#gid=0'
student_data <- gsheet2tbl(URL)
# Simplify variable names
names(student_data) <- c('home_town', 'used_R', 'literacy', "major", "id")
# Relevel factors
r_skills <- 1:10
student_data$literacy <- factor(student_data$literacy, levels = r_skills)
# Majors
majors <- c('VWL', 'BWL', 'BIA', 'BLaw', 'BLE','other')
student_data$major <- factor(student_data$major, levels = majors)
# Used R
student_data$used_R <- factor(student_data$used_R, levels = c('TRUE', 'FALSE'))
# Find home_town longitude and latitude -----
home_towns <- student_data$home_town
home_towns <- home_towns[!is.na(home_towns)]
register_google(key = KEY)
home_town_coords <- geocode(home_towns) # problem: might reach limit!
home_town_coords <- na.omit(home_town_coords)
# Map student home_towns
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = home_town_coords, lng = ~lon, lat = ~lat, color = "#02934a")
# Maximum distance for relationship
max_distance <- 100000 # in meters
# Find distances between each home town
distances <- vector()
for (i in 1:nrow(home_town_coords)) {
temp_indv <- home_town_coords[i, ]
temp_distances <- distm(home_town_coords, temp_indv) %>% data.frame
temp_distances$id <- i
temp_distances$other_id <- 1:nrow(home_town_coords)
names(temp_distances)[1] <- 'distance'
distances <- rbind(distances, temp_distances)
}
distances <- distances[, c(2, 3, 1)]
# Remove self-self edges
distances <- subset(distances, id != other_id)
# Keep only nodes that are within 1,000 km of each other
if (any(distances$distance <= max_distance)) {
distances <- subset(distances, distance <= max_distance)
}
# Plot network
simpleNetwork(distances, zoom = TRUE, linkColour = "#02934a", nodeColour = "#02934a", charge = 0)
# Function to find countries that each home_town is in
coords2country = function(points)
{
# Function from: http://stackoverflow.com/a/14342127
countriesSP <- getMap(resolution='low')
#setting CRS directly to that from rworldmap
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
# return the ADMIN names of each country
indices$ISO3
}
countries <- coords2country(na.omit(home_town_coords))
# Find country counts
countries_count <- table(countries)
countries_count <- countries_count[countries_count > 0]
countries_count <- data.frame(countries_count)
# Plot counts
plot_ly(data = countries_count, x = ~countries, y = ~Freq, color = I("#02934a")) %>%
layout(xaxis = list(title = ''),
yaxis = list(title = 'Frequency'))
countries_count
countries_count
# Load required packages. Install if needed.
library(flexdashboard)
library(gsheet)
library(ggmap)
library(dplyr)
library(leaflet)
library(sp)
library(rworldmap)
library(networkD3)
library(geosphere)
library(plotly)
library(shiny)
# fix vars
#  API key needed here
# KEY <- readLines("../../admin/2021/keys/datahandling_survey_static.txt") # key UM
KEY <- "AIzaSyASzCqktyaJwksvy9Oi3i50gHKuiAFOP5g"
# Download survey data
# Download data
URL <- 'https://docs.google.com/spreadsheets/d/13jZFfQHdqN5fI4PqGZZCvHGSgPbDPKBhdSmQ4WClyME/edit?gid=0#gid=0'
student_data <- gsheet2tbl(URL)
student_data
# This code is based on Christopher Gandrud's Shiny examples:
# https://github.com/christophergandrud/datafest2017_dashboard_shiny/tree/3256125240d09bac933ed359c879036fcbeb9be5
# Load required packages. Install if needed.
library(flexdashboard)
library(gsheet)
library(ggmap)
library(dplyr)
library(leaflet)
library(sp)
library(rworldmap)
library(networkD3)
library(geosphere)
library(plotly)
library(shiny)
# fix vars
#  API key needed here
# KEY <- readLines("../../admin/2021/keys/datahandling_survey_static.txt") # key UM
KEY <- "AIzaSyASzCqktyaJwksvy9Oi3i50gHKuiAFOP5g"
# Download survey data
# Download data
URL <- 'https://docs.google.com/spreadsheets/d/13jZFfQHdqN5fI4PqGZZCvHGSgPbDPKBhdSmQ4WClyME/edit?gid=0#gid=0'
student_data <- gsheet2tbl(URL)
# Simplify variable names
names(student_data) <- c('home_town', 'used_R', 'literacy', "major", "id")
# Relevel factors
r_skills <- 1:10
student_data$literacy <- factor(student_data$literacy, levels = r_skills)
# Majors
majors <- c('VWL', 'BWL', 'BIA', 'BLaw', 'BLE','other')
student_data$major <- factor(student_data$major, levels = majors)
# Used R
student_data$used_R <- factor(student_data$used_R, levels = c('TRUE', 'FALSE'))
# Find home_town longitude and latitude -----
home_towns <- student_data$home_town
home_towns <- home_towns[!is.na(home_towns)]
register_google(key = KEY)
home_town_coords <- geocode(home_towns) # problem: might reach limit!
home_town_coords <- na.omit(home_town_coords)
# Map student home_towns
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = home_town_coords, lng = ~lon, lat = ~lat, color = "#02934a")
renderPlot({
# Find major counts
r_exp <- table(student_data$used_R)
# Calculate percentages
r_exp_percents <- prop.table(r_exp) * 100
r_exp_percents <- as.data.frame(r_exp_percents)
names(r_exp_percents) <- c("Used R", "Pct")
# Bar plot
ggplot(r_exp_percents, aes(x = `Used R`, y = Pct)) +
geom_bar(stat = "identity", fill = "#02934a") +
geom_text(aes(y = Pct/2, label = paste0(round(Pct, 1), "%")),
size = 3, color = "white") +
theme_classic()
})
renderPlot({
# Find major counts
df <- student_data %>%
select(major, literacy) %>%
group_by(major) %>%
summarise(mean_ability = mean(as.numeric(literacy), na.rm = T))
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy),) +
geom_point(stat = "identity", color = "#02934a") +
geom_point(aes(y = mean_ability), color = "red", shape=1,size=3) +
theme_classic()
})
# Find major counts
df <- student_data %>%
select(major, literacy) %>%
group_by(major) %>%
summarise(mean_ability = mean(as.numeric(literacy), na.rm = T))
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy),) +
geom_point(stat = "identity", color = "#02934a") +
geom_point(aes(y = mean_ability), color = "red", shape=1,size=3) +
theme_classic()
student_data
df
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df)
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a") +
geom_point(aes(y = mean_ability), color = "red", shape=1,size=3) +
theme_classic()
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df)
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_ability), color = "red", shape=1, size=4) +
theme_classic()
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1)
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_ability), color = "red", shape=1, size=4)
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df)
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
theme_classic()
# Find major counts
df <- student_data %>%
select(major, literacy) %>%
group_by(major) %>%
summarise(mean_literacy = mean(as.numeric(literacy), na.rm = T))
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
theme_classic()
df <- student_data %>%
select(major, literacy) %>%
group_by(major) %>%
summarise(mean_literacy = mean(as.numeric(literacy), na.rm = T))
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df)
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy))
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
theme_classic()
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10))+
theme_classic()
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10)) +
geom_hline(aes(yintercept = mean(student_data$literacy)))+
theme_classic()
mean(student_data$literacy)
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10)) +
geom_hline(aes(yintercept = mean(as.numeric(student_data$literacy)))) +
theme_classic()
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10)) +
geom_hline(aes(yintercept = mean(as.numeric(student_data$literacy)), color = "gray70", shape = 2)) +
theme_classic()
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10)) +
geom_hline(aes(yintercept = mean(as.numeric(student_data$literacy)), color = "gray70", type = 2)) +
theme_classic()
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10)) +
geom_hline(aes(yintercept = mean(as.numeric(student_data$literacy))), color = "gray70", type = 2) +
theme_classic()
# Bar plot
student_data %>%
select(major, literacy, home_town) %>%
na.omit() %>%
left_join(df) %>%
mutate(literacy = as.numeric(literacy)) |>
ggplot(aes(x = major, y = literacy)) +
geom_point(stat = "identity", color = "#02934a", size = 1) +
geom_point(aes(y = mean_literacy), color = "red", shape=1, size=4) +
scale_y_continuous(limits = c(0, 10)) +
geom_hline(aes(yintercept = mean(as.numeric(student_data$literacy))), color = "gray70", linetype = 3) +
theme_classic()
runApp('~/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro')
?sprintf
sprintf("mimic-google-form_%s.csv", humanTime())
humanTime <- function() format(Sys.time(), "%Y%m%d-%H%M%OS")
humanTime
sprintf("mimic-google-form_%s.csv", humanTime())
write.csv(loadData(), file, row.names = FALSE)
loadData <- function() {
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "datahandlingform-e3748c92a518.json")
ss <- sheet_url
read_sheet(ss)
}
write.csv(loadData(), file, row.names = FALSE)
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "datahandlingform-e3748c92a518.json")
# Authenticate with Google Sheets (run once interactively if needed)
# This line can be omitted if you've already authenticated using service accounts
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "datahandlingform-e3748c92a518.json")
# Define the Google Sheet URL (replace with your actual sheet URL)
sheet_url <- "https://docs.google.com/spreadsheets/d/13jZFfQHdqN5fI4PqGZZCvHGSgPbDPKBhdSmQ4WClyME/edit?gid=0#gid=0"
fieldsMandatory <- c("used_R", "literacy", "major")
humanTime <- function() format(Sys.time(), "%Y%m%d-%H%M%OS")
loadData <- function() {
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "datahandlingform-e3748c92a518.json")
ss <- sheet_url
read_sheet(ss)
}
write.csv(loadData(), file, row.names = FALSE)
runApp('~/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro')
?downloadHandler
loadData()
library(shiny)
library(googlesheets4)
library(shinyjs)
library(DT)
# Authenticate with Google Sheets (run once interactively if needed)
# This line can be omitted if you've already authenticated using service accounts
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "datahandlingform-e3748c92a518.json")
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "C:/Users/aurel/OneDrive/Documents/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro/datahandlingform-e3748c92a518.json"
ss <- sheet_url
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "C:/Users/aurel/OneDrive/Documents/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro/datahandlingform-e3748c92a518.json")
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
path = "C:/Users/aurel/OneDrive/Documents/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro/datahandlingform-e3748c92a518.json")
ss <- sheet_url
read_sheet(ss)
# Authenticate with Google Sheets (run once interactively if needed)
# This line can be omitted if you've already authenticated using service accounts
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
# path = "datahandlingform-e3748c92a518.json")
path = "C:/Users/aurel/OneDrive/Documents/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro/datahandlingform-e3748c92a518.json")
loadData()
loadData <- function() {
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
# path = "datahandlingform-e3748c92a518.json")
path = "C:/Users/aurel/OneDrive/Documents/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro/datahandlingform-e3748c92a518.json")
ss <- sheet_url
read_sheet(ss)
}
gs4_auth(scopes = "https://www.googleapis.com/auth/spreadsheets",
# path = "datahandlingform-e3748c92a518.json")
path = "C:/Users/aurel/OneDrive/Documents/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro/datahandlingform-e3748c92a518.json")
ss <- sheet_url
read_sheet(ss)
loadData()
output$downloadBtn <- downloadHandler(
filename = function() {
sprintf("mimic-google-form_%s.csv", humanTime())
},
content = function(file) {
write.csv(loadData(), file, row.names = FALSE)
}
)
runApp('~/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro')
sprintf("mimic-google-form_%s.csv", humanTime())
runApp('~/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro')
runApp('~/DataHandling/datahandling-lecture2023/materials/app_firstlecture/DataHandlingIntro')
