include_graphics("../../img/data_science_pipeline.png")
include_graphics("../../img/warmup_dalle.png")
knitr::include_graphics("../../img/venn_diagramm.png")
file <- {
"students": [
# parse the JSON-document shown in the example above
json_doc <- fromJSON("../../data/person.json")
library(jsonlite)
# parse the JSON-document shown in the example above
json_doc <- fromJSON("../../data/person.json")
json_doc
# look at the structure of the document
str(json_doc)
as.data.frame(json_doc)
# parse the JSON-document shown in the example above
json_doc <- fromJSON("../../data/QUIZ_L5.json")
json_doc
# parse the JSON-document shown in the example above
json_doc <- fromJSON("../../data/QUIZ_L5.json")
# 3. Explore the structure of the document. Use str() or any other command.
# Must figure in the answer: json are imported as lists of lists (of lists...)
# In this case, we are lucky to have only one element in the main list, i.e. the
# element "students"
str(json_doc)
# 4. Coerce the list to a data frame. There are different possibilities.
df <- as.data.frame(json_doc)
df <- json_doc[[1]]
df
# 2. Parse the JSON-document
json_doc <- fromJSON("../../data/QUIZ_L5.json")
json_doc
?fromJSON()
# 2. Parse the JSON-document
json_doc <- fromJSON("../../data/QUIZ_L5.json", simplifyVector = FALSE)
json_doc
# 2. Parse the JSON-document
json_doc <- fromJSON("../../data/QUIZ_L5.json", simplifyVector = FALSE, simplifyDataFrame = TRUE)
json_doc
# 2. Parse the JSON-document
json_doc <- fromJSON("../../data/QUIZ_L5.json")
# 2. Parse the JSON-document
json_doc <- fromJSON("../../data/QUIZ_L5.json", flatten = FALSE)
json_doc
# 5. Get only first names for first column, and the average grades per student.
mean(df$grades)
# 4. Coerce the list to a data frame. There are different possibilities.
df <- as.data.frame(json_doc)
df
# 2. Parse the JSON-document
json_doc <- fromJSON("../../data/QUIZ_L5.json")
# 3. Explore the structure of the document. Use str() or any other command.
# Must figure in the answer: json are imported as lists of lists (of lists...)
# In this case, we are lucky to have only one element in the main list, i.e. the
# element "students"
str(json_doc)
# 4. Coerce the list to a data frame. There are different possibilities.
df <- as.data.frame(json_doc)
df
df <- json_doc[[1]]
df
df$grades
# 5. Get only first names for first column, and the average grades per student.
mean(df$grades)
# 4. Coerce the list to a data frame. There are different possibilities.
df <- as_tibble(json_doc)
df
library(tibble)
# 4. Coerce the list to a data frame. There are different possibilities.
df <- as_tibble(json_doc)
df
# 3. Explore the structure of the document. Use str() or any other command.
# Must figure in the answer: json are imported as lists of lists (of lists...)
# In this case, we are lucky to have only one element in the main list, i.e. the
# element "students"
str(json_doc)
# 4. Extract first names
first_names <- json_doc$students$firstName
# 5. Extract grades
grades <- json_doc$students$grades
grades
gradesMean <- c()
gradesMean
gradesMean <- c()
for (i in 1:nrows(grades)){
gradesMean[i] <- mean(grades[i, ])
}
for (i in 1:nrow(grades)){
gradesMean[i] <- mean(grades[i, ])
}
gradesMean
grades[i, ]
mean(grades[i, ])
gradesMean <- c()
for (i in 1:nrow(grades)){
gradesMean[i] <- mean(as.numeric(grades[i, ]))
}
gradesMean
grades
# 6. Create a data frame or a tibble
data.frame(first_names, gradesMean)
# We create a fake, messy dataframe for exercise purposes
messy_df <- data.frame(last_name = c("Wayne", "Trump", "Karl Marx"),
first_name = c("John", "Melania", ""),
gender = c("male", "female", "Man"),
date = c("2018-11-15", "2018.11.01", "2018/11/02"),
income = c("150,000", "250000", "10000"), stringsAsFactors = FALSE)
messy_df
## define, clean categorical variables ------------------------------------------------------------------------
messy_df$gender <- as.factor(messy_df$gender)
messy_df$gender
messy_df$gender
## standardize categories ------------------------------------------------------------------------
messy_df$gender[messy_df$gender == "Man"] <- "male"
messy_df$gender
?relevel
?levels
levels(messy_df$gender)
levels(messy_df$gender)
levels(messy_df$gender)[3]
levels(messy_df$gender)[3] <- NULL
levels(messy_df$gender)[3] <- "male"
messy_df$gender
levels(messy_df$gender)[3]
messy_df
messy_df$income
## ------------------------------------------------------------------------
messy_df$income <- str_replace(messy_df$income,
pattern = ",",
replacement = "")
str_replace
# Load packages (install if needed)
library(tidyverse) # tidyverse contains dplyr, readr, tibble, and all other packages from the tidyverse universe.
## ------------------------------------------------------------------------
messy_df$income <- str_replace(messy_df$income,
pattern = ",",
replacement = "")
messy_df$income <- as.integer(messy_df$income)
## split strings, add new variables
splitnames <- str_split(messy_df$last_name,
pattern = " ",
simplify = TRUE)
splitnames
## find rows with problematic cases, add correct first name,
problem_cases <- messy_df$first_name == ""
problem_cases
splitnames
messy_df$last_name
## find rows with problematic cases, add correct first name,
problem_cases <- messy_df$first_name == ""
problem_cases
messy_df$first_name[problem_cases]
splitnames
splitnames[problem_cases, 1]
##  parse dates correctly -------------------------------------------------------
library(lubridate)
## ------------------------------------------------------------------------
messy_df$date <- ymd(messy_df$date)
messy_df$date
messy_df
## find rows with problematic cases, add correct first name,
problem_cases <- messy_df$first_name == ""
messy_df$first_name[problem_cases] <- splitnames[problem_cases, 1]
#last name
messy_df$last_name[problem_cases] <- splitnames[problem_cases, 2]
messy_df
# load example data
rawdata <- read.csv("data/treatments.csv")
# Set fix variables for PATH (for each student different)
INPUT_PATH <- "C:/Users/aurel/datahandling-lecture2023/data"
rawdata <- read.csv(paste0(INPUT_PATH, "data/treatments.csv"))
rawdata <- read.csv(paste0(INPUT_PATH, "/treatments.csv"))
rawdata
# reshape from wide to long
tidydata <- pivot_longer(data = rawdata,
cols = c("treatmenta", "treatmentb"),
names_to = "treatment",
names_prefix = "treatment",
values_to = "result")
# inspect result
tidydata
## initialize and inspect a wide example data-frame
wide_df <- data.frame(last_name = c("Wayne", "Trump", "Marx"),
first_name = c("John", "Melania", "Karl"),
gender = c("male", "female", "male"),
income.2018 = c("150000", "250000", "10000"),
income.2017 = c( "140000", "230000", "15000"),stringsAsFactors = FALSE)
wide_df
# transform from wide to long
long_df <- pivot_longer(wide_df,
c(income.2018, income.2017),
names_to = "year",
names_prefix = "income.",
values_to = "income")
# inspect the result
long_df
# initiate a weird long data.frame
weird_df <- data.frame(last_name = c("Wayne", "Trump", "Marx",
"Wayne", "Trump", "Marx",
"Wayne", "Trump", "Marx"),
first_name = c("John", "Melania", "Karl",
"John", "Melania", "Karl",
"John", "Melania", "Karl"),
gender = c("male", "female", "male",
"male", "female", "male",
"male", "female", "male"),
value = c("150000", "250000", "10000",
"2000000", "5000000", "NA",
"50", "25", "NA"),
variable = c("income", "income", "income",
"assets", "assets", "assets",
"age", "age", "age"),
stringsAsFactors = FALSE)
weird_df
# transform from long to wide
tidy_df <- pivot_wider(weird_df,
names_from = "variable",
values_from = "value")
# inspect result
tidy_df
# initialize and inspect sample subsets
# initialize
subset1 <- data.frame(ID=c(1,2),
X=c("a", "b"),
Y=c(50,10))
subset2 <- data.frame(ID=c(3,4),
Z=c("M", "O"))
subset3 <- data.frame(ID= c(5),
X=c("c"),
Z="P")
# inspect
str(subset1)
str(subset2)
str(subset3)
subset1
subset2
subset3
# stack data frames
combined_df <- bind_rows(subset1, subset2, subset3)
combined_df
combined_df1 <- cbind(subset1, subset2, subset3)
combined_df1
combined_df1 <- rbind(subset1, subset2, subset3)
# stack data frames
combined_df <- bind_rows(subset1, subset2, subset3)
# inspect the result
combined_df
include_graphics("../../img/rowbinding_dark.png")
knitr::include_graphics("../../img/rowbinding_dark.png")
class(1)
type(1)
typeof(1)
class(c(1,2))
typeof(c(1,2))
schwiizerChuchi <- data.frame(
Region = c("Zurich", "Geneva", "Lucerne"),
Fondue = c(8, 9, 7),
Raclette = c(7, 8, 10),
Rosti = c(9, 6, 8),
Olma = c(10, 7, 8)
)
schwiizerChuchiLong <- pivot_longer(schwiizerChuchi,
cols = c(Fondue, Raclette, Rosti, Olma),
values_to = "Popularity",
names_to = "Dish")
schwiizerChuchiLong
dim(schwiizerChuchiLong)
mean(schwiizerChuchi$Raclette)
mean(schwiizerChuchiLong$Raclette)
Ostschwiz <- data.frame(
Region = c("St. Gallen", "Appenzell"),
FavoriteBeverage = c("Schützengarten", "Quöllfrisch"),
Year = c(2021, 2021)
)
Valais <- data.frame(
Region = c("Valais"),
FavoriteBeverage = c("Fendant"),
Year = c(2021)
)
Vaud <- data.frame(
Region = c("Vaud"),
FavoriteBeverage = c("Chasselas"),
Year = c(2021)
)
rbind(Ostschwiz, Valais, Vaud)
Ostschwiz <- data.frame(
Region = c("St. Gallen", "Appenzell"),
FavoriteBeverage = c("Schützengarten", "Quöllfrisch", "Appenzeller"),
Year = c(2021, 2021, 2022)
)
Ostschwiz <- data.frame(
Region = c("St. Gallen", "Appenzell", "Appenzell"),
FavoriteBeverage = c("Schützengarten", "Quöllfrisch", "Appenzeller"),
Year = c(2021, 2021, 2022)
)
Ostschwiz
Ostschwiz
Valais <- data.frame(
Region = c("Valais"),
FavoriteBeverage = c("Fendant"),
Year = c(2021)
)
Vaud <- data.frame(
Region = c("Vaud"),
FavoriteBeverage = c("Chasselas"),
Year = c(2021)
)
rbind(Ostschwiz, Valais, Vaud) == 4
nrow(rbind(Ostschwiz, Valais, Vaud)) == 4
nrow(rbind(Ostschwiz, Valais, Vaud))
os <- pivot_wider(Ostschwiz)
os <- pivot_wider(Ostschwiz, cols = c(Region, FavoriteBeverage, Year))
os <- pivot_wider(Ostschwiz, names_from = c(Year), values_from = FavoriteBeverage)
os
rbind(os, Vaud)
bind_rows(os, Vaud)
os
colnames(Ostschwiz)[2]
Ostschwiz <- pivot_wider(Ostschwiz,
names_from = c(Year),
values_from = FavoriteBeverage)
colnames(Ostschwiz)[2]
temp_location_data <- data.frame(
temperature_location = c("22C_London", "18C_Paris", "25C_Rome")
)
temp_location_data
temp_location_data
splitnames <- str_split(temp_location_data$temperature_location,
pattern = "_",
simplify = TRUE)
splitnames
tidy_temp_location
temp_location_data
splitnames
tidy_temp_location <- as.data.frame(
str_split(temp_location_data$temperature_location,
pattern = "_",
simplify = TRUE)
)
tidy_temp_location
tidy_temp_location <- as_tibble(
str_split(temp_location_data$temperature_location,
pattern = "_",
simplify = TRUE)
)
tidy_temp_location
temp_location_data
# Tidying the dataset by separating the variables
tidy_temp_location <- as.data.frame(
str_split(temp_location_data$temperature_location,
pattern = "_",
simplify = TRUE)
)
names(tidy_temp_location) <- c("temperature", "location")
tidy_temp_location
