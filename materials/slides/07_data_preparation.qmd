---
title: 'Data Handling: Import, Cleaning and Visualisation'
author: "Dr. AurÃ©lien Sallin"
subtitle: 'Lecture 7:<br>Data Preparation'
date: "2024-11-14"
echo: false
code-line-numbers: false
format:
  revealjs:
    template-partials:
       - ../../style/title-slide.html
    width: 1280
    height: 720
    smaller: true
    embed-resources: true
    self-contained: true
    slide-number: c
    theme: ../../style/hsgtheme.scss
highlight-style: dracula 
cache: false
---

```{r set-options, echo=FALSE, message=FALSE, warning=FALSE, cache=FALSE}
options(width = 100)
library(knitr)
library(dplyr)
library(tidyr)
library(stringr)
```

# Warm-up
## JSON files: open-ended question

Be the JSON file

```{json, echo = TRUE}
{
  "students": [
    {
      "id": 19091,
      "firstName": "Peter",
      "lastName": "Mueller",
      "grades": {
          "micro": 5,
          "macro": 4.5,
          "data handling": 5.5
          }
    },
    {
      "id": 19092,
      "firstName": "Anna",
      "lastName": "Schmid",
      "grades": {
          "micro": 5.25,
          "macro": 4,
          "data handling": 5.75
          }
    },
    {
      "id": 19093,
      "firstName": "Noah",
      "lastName": "Trevor",
      "grades": {
          "micro": 4,
          "macro": 4.5,
          "data handling": 5
          }
    }
  ]
}
```

Write an R code to extract a table with, as a first column, a vector of first names, and as a second column, the average grade per student. The table can be a data frame or a tibble.


## XML

```{xml, echo = TRUE}
<students>
  <student>
    <id>19091</id>
    <firstName>Peter</firstName>
    <lastName>Mueller</lastName>
    <grades>
      <micro>5</micro>
      <macro>4.5</macro>
      <dataHandling>5.5</dataHandling>
    </grades>
  </student>
  <student>
    <id>19092</id>
    <firstName>Anna</firstName>
    <lastName>Schmid</lastName>
    <grades>
      <micro>5.25</micro>
      <macro>4</macro>
      <dataHandling>5.75</dataHandling>
    </grades>
  </student>
  <student>
    <id>19093</id>
    <firstName>Noah</firstName>
    <lastName>Trevor</lastName>
    <grades>
      <micro>4</micro>
      <macro>4.5</macro>
      <dataHandling>5</dataHandling>
    </grades>
  </student>
</students>
```

- 'students' is the root-node, 'grades' are its children
- The siblings of Trevor Noah are Anna Schmid and Peter Mueller
- The code below would be an alternative, equivalent notation for the third student in the xml file above.
```{xml, echo = TRUE}
<student id="19093" firstName="Noah" lastName="Trevor">
      <grades micro="4" macro="4.5" dataHandling="5" />
</student>
```




# Part II: Data preparation, analysis, and visualization

## The dataset is imported, now what?

- In practice: still a long way to go.
- Parsable, but messy data: inconsistencies, data types, missing observations, wide format.



## The dataset is imported, now what?

- In practice: still a long way to go.
- Parsable, but messy data: inconsistencies, data types, missing observations, wide format.

<br>

- **Goal** of data preparation: dataset is ready for analysis.



## Part II: Data gathering and preparation
```{r pipeline, echo=FALSE, fig.align='center', out.width="80%", purl = FALSE}
include_graphics("../../img/data_science_pipeline.png")
```

##

```{r, echo=FALSE, out.width = "40%", fig.align='center', purl=FALSE, fig.cap = "Source: https://www.storybench.org/wp-content/uploads/2017/05/tidyverse.png"}
include_graphics("../../img/tidyverse_pipeline.png")
```



## Part II: Data preparation, analysis, and visualization

```{r echo = FALSE, warning=FALSE, message = FALSE}
library(readxl)
library(knitr)
library(magrittr)
library(kableExtra)

sched <- read_xlsx("../../schedule2024.xlsx", col_types = "text")
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
kable(sched[12:15, c(1,5)], format = "markdown") 
```



## Part II: Data preparation, analysis, and visualization

```{r echo = FALSE, warning = FALSE}
kable(sched[16:nrow(sched), c(1,5)], format = "markdown") 
```




# Part II: Data gathering and preparation

<!-- ## Part II: Data gathering and preparation -->

<!-- ```{r venn, echo=FALSE, fig.align='center', out.width="55%", purl = FALSE} -->
<!-- include_graphics("../../img/venn_diagramm.png") -->
<!-- ``` -->


## Data preparation: Beware of the "Garbage in garbage out" problem

:::: {.columns}

::: {.column width="60%"}

#### Key conditions:
  1. Data values are consistent/clean within each variable.
  2. Variables are of proper data types.
  3. Dataset is in 'tidy' (long) format.


:::

::: {.column width="40%"}

```{r garbage, echo=FALSE, out.width = "90%", fig.align='center',  purl=FALSE}
include_graphics("../../img/dalle_garbageinout.png")
```


:::
:::: 


## Goals for today and next time: master data preparation

<br>

#### Data preparation can be understood as consisting of five main actions:

- **Tidy** data.
- **Reshape** datasets from wide to long (and vice versa).
- **Bind** or stack rows in datasets.
- **Join** datasets (covered next time).
- **Clean** data.

<!-- Data Cleaning: This step usually involves handling missing values, correcting errors, and standardizing formats, ensuring the data is accurate and reliable before moving to other steps. -->
<!-- Tidying Data: This step focuses on structuring data to be analysis-ready, often using principles from tidy data. -->
<!-- Reshaping: Converting data formats (wide-to-long or long-to-wide) to fit specific analytical needs. -->
<!-- Row Binding/Stacking: Combining datasets by stacking rows, often when data comes in separate parts. -->
<!-- Joining: Merging datasets by columns, combining information based on a shared key. -->


# Tidy data

## Tidy data: some vocabulary

Following R4DS, a tidy dataset is tidy when... 

  1. Each <span style="color:red">variable</span> is a <span style="color:red">column</span>; each column is a variable.
  2. Each <span style="color:green">observation</span> is a <span style="color:green">row</span>; each row is an observation.
  3. Each <span style="color:blue">value</span> is a <span style="color:blue">cell</span>; each cell is a single value.

<!-- - *Dataset*: Collection of *values* (numbers and strings). -->
<!-- - Every value belongs to a *variable* and an *observation*. -->
<!-- - *Variable*: Contains all values that measure the same underlying attribute across units. -->
<!-- - *Observation*: Contains all values measured on the same unit (e.g., a person). -->


## Tidy data

```{r tidydata, echo=FALSE, out.width = "90%", fig.align='center', purl=FALSE, fig.cap="Tidy data. Source R4DS."}
include_graphics("../../img/tidy-1.png")
```


## Tidy data is not trivial

In Economics, the definition of an *observation* can vary:

- Panel data (longitudinal data)
- Cross-sectional data
- Time series


## Tidy data is not trivial

#### Panel Data (Longitudinal Data):
Panel data tracks the **same units over time**: each unit has multiple observations across time periods.<br>
Observation: a measurement for a specific unit at a particular point in time.

<br>

#### Cross-Sectional Data:
"Snapshot" of **different units at the same moment**.<br>
Observation: single measurement for each unit at a single point in time.

<br>

#### Time Series Data:

**Single unit tracked over time**. <br> 
Observation: measurement of a single variable for a single unit (or aggregate) over multiple points in time.


## Three examples of non-tidy data (1)

#### Messy ðŸ’© 
```{r, echo = FALSE}
weather_data <- tibble(
  measure = c("Temperature", "Humidity"),
  `Jan 1` = c(20, 80),
  `Jan 2` = c(22, 78),
  `Jan 3` = c(21, 82)
)

# Viewing the dataset
weather_data
```

<br>

#### Tidy ðŸ˜Ž

...

## Three examples of non-tidy data (1)

#### Messy ðŸ’©
```{r, echo = FALSE}
weather_data <- tibble(
  measure = c("Temperature", "Humidity"),
  `Jan 1` = c(20, 80),
  `Jan 2` = c(22, 78),
  `Jan 3` = c(21, 82)
)

# Viewing the dataset
weather_data
```

<br>

#### Tidy ðŸ˜Ž
```{r, echo = FALSE}
# Tidying the dataset
tidy_weather <- weather_data %>%
  pivot_longer(cols = -measure, names_to = "Date", values_to = "Value") %>%
  pivot_wider(names_from = measure, values_from = Value)

# Viewing the tidy data
tidy_weather
```



## Three examples of non-tidy data (2)

#### Messy ðŸ’©
```{r, echo = FALSE}
temp_location_data <- tibble(
  year = c(2019, 2019, 2019),
  temperature_location = c("22C_London", "18C_Paris", "25C_Rome")
)

temp_location_data
```

<br>

#### Tidy ðŸ˜Ž
```
homework..
```

```{r, echo = FALSE, include=FALSE}
# Tidying the dataset by separating the variables
tidy_temp_location <- data.frame(
  temp_location_data$year,
  str_split(temp_location_data$temperature_location, 
            pattern = "_", 
            simplify = TRUE)
)

names(tidy_temp_location) <- c("year", "temperature", "location")
```


## Three examples of non-tidy data (3)

#### Messy ðŸ’©
```{r, echo = FALSE}
grades_data <- data.frame(
  Student = c("Johannes", "Hannah", "Igor"),
  Econ = c(5, 5.25, 4),
  DataHandling = c(4, 4.5, 5),
  Management = c(5.5, 6, 6)
)

grades_data

```

<br>

#### Tidy ðŸ˜Ž
```
homework..
```

```{r, echo = FALSE, include=FALSE}
tidy_grades <- grades_data %>%
  pivot_longer(cols = -Student, names_to = "Subject", values_to = "Grade")

tidy_grades
```


# Reshaping

## Reshaping: the concept

<!-- ```{r widetolong, echo=FALSE, out.width = "65%", fig.align='center',  purl=FALSE} -->
<!-- include_graphics("../../img/reshape2_dark.png") -->
<!-- ``` -->

```{r, echo=FALSE, out.width = "80%", fig.align='center', purl=FALSE, fig.cap="Long and wide data. Source: [Hugo Tavares](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)"}
include_graphics("../../img/longvswide.png")
```

## Reshaping: implementation in `R`

- From wide to long: `melt()`, `gather()`,

ðŸ‘‰ We'll use `tidyverse::pivot_longer()`.


- From long to wide: `cast()`, `spread()`,

ðŸ‘‰ We'll use `tidyverse::pivot_wider()`.


## Reshaping: implementation in `R` with `tidyverse()`

```{r longvswideCode, echo=FALSE, out.width = "80%", fig.align='center', purl=FALSE, fig.cap="Long and wide data with code. Source: [Hugo Tavares](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)"}
include_graphics("../../img/longvswideCode.png")
```


# Stack and row-bind

## Stack/row-bind: the concept

```{r rowbinding, echo=FALSE, out.width = "55%", fig.align='center', purl=FALSE}
include_graphics("../../img/rowbinding_dark.png")
```

## Stack/row-bind: implementation in `R`

- Use `rbind()` in base `R`
  - Requires that the data frames have the same column names and same column classes. 
  
<br>

- Use `bind_rows()` from `dplyr()`
  - More flexible
  - Binds data frames with different column names and classes
  - Automatically fills missing columns with `NA`

<br>

*For these reasons (+ performance, handling or row names, and handling of factors), `dplyr::bind_rows()` is preferred in most applications.*

## Stack/row-bind: code example

```{r, echo=TRUE}
# Create three dfs
subset1 <- data.frame(ID = c(1,2),
                      X = c("a", "b"),
                      Y = c(50,10))

subset2 <- data.frame(ID = c(3,4),
                      Z = c("M", "O"))

subset3 <- data.frame(ID = c(5),
                      X = c("c"),
                      Z = "P")

# Inspect
subset1
subset2
subset3
```


## Stack/row-bind: code example
```{r, error=TRUE, echo = TRUE, eval=TRUE}
# Stack data frames
combined_df_bind_rows <- bind_rows(subset1, subset2, subset3)
combined_df_rbind     <- rbind(subset1, subset2, subset3) 

# What are the following objects?
combined_df_bind_rows
combined_df_rbind
```



::: aside
The errors are due to the requirements of `rbind()`.
:::




