---
title: 'Data Handling: Import, Cleaning and Visualisation'
subtitle: 'Lecture 8:<br>Basic Data Manipulation with R'
author: "Dr. Aur√©lien Sallin"
date: "2024-11-21"
echo: false
code-line-numbers: false
format:
  revealjs:
    template-partials:
       - ../../style/title-slide.html
    width: 1280
    height: 720
    smaller: true
    embed-resources: true
    self-contained: true
    slide-number: c
    theme: ../../style/hsgtheme.scss
highlight-style: dracula 
cache: false
execute:
  echo: true
---

```{r set-options, echo=FALSE, message=FALSE, warning=FALSE, cache=FALSE}
options(width = 100)
library(knitr)
library(dplyr)
library(tidyverse)
library(tidyr)
```



# Recap: Data Preparation

---

```{r pipeline, echo=FALSE, out.width = "85%", fig.align='center',  purl=FALSE}
include_graphics("../../img/data_science_pipeline.png")
```



## Data preparation/data cleaning


:::: {.columns}

::: {.column width="60%"}

#### Goal of data preparation: Dataset is ready for analysis.

<br>

#### Key conditions:
  1. Data values are consistent/clean within each variable.
  2. Variables are of proper data types.
  3. Dataset is in 'tidy' (in long format)!
  
:::

::: {.column width="40%"}

```{r , echo=FALSE, out.width = "90%", fig.align='center', fig.cap = '"Garbage in garbage out (GIGO)"', purl=FALSE}
include_graphics("../../img/dalle_garbageinout.png")
```


:::
:::: 


## Data preparation consists of five main steps

- **Tidy** data.
- **Reshape** datasets from wide to long (and vice versa).
- **Bind** or stack rows in datasets.
- **Join** datasets.
- **Clean** data.


## A tidy dataset is tidy, when ... 

  1. Each <span style="color:red">variable</span> is a <span style="color:red">column</span>; each column is a variable.
  2. Each <span style="color:green">observation</span> is a <span style="color:green">row</span>; each row is an observation.
  3. Each <span style="color:blue">value</span> is a <span style="color:blue">cell</span>; each cell is a single value.

<!-- - *Dataset*: Collection of *values* (numbers and strings). -->
<!-- - Every value belongs to a *variable* and an *observation*. -->
<!-- - *Variable*: Contains all values that measure the same underlying attribute across units. -->
<!-- - *Observation*: Contains all values measured on the same unit (e.g., a person). -->


## Reshaping
```{r longvswideCode, echo=FALSE, out.width = "80%", fig.align='center', purl=FALSE, fig.cap="Long and wide data. Source: [Hugo Tavares](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)"}
include_graphics("../../img/longvswideCode.png")
```


## Stack/row-bind

```{r, echo=FALSE, out.width = "55%", fig.align='center', purl=FALSE}
include_graphics("../../img/rowbinding_dark.png")
```



# Warm up

## Reshaping: multiple/one/none answers correct

Consider the following data frame `schwiizerChuchi`. This dataset records the popularity ratings (on a scale of 1 to 10) of various Swiss dishes in different regions of Switzerland:

:::: {.columns}

::: {.column width="70%"}

```{r}
schwiizerChuchi <- data.frame(
  Region = c("Zurich", "Geneva", "Lucerne"),
  Fondue = c(8, 9, 7),
  Raclette = c(7, 8, 10),
  Rosti = c(9, 6, 8),
  Olma = c(10, 7, 8)
)
```


```{r}
schwiizerChuchiLong <- pivot_longer(schwiizerChuchi,
                                    cols = c(Fondue, Raclette, Rosti, Olma),
                                    values_to = "Popularity",
                                    names_to = "Dish")
```
:::

::: {.column width="30%"}

```{r garbage, echo=FALSE, out.width = "90%", fig.align='center',  purl=FALSE}
include_graphics("../../img/schwiizerchuchi.jpg")
```

:::
:::: 


Which of the following statements is true?

- `nrow(schwiizerChuchiLong) == 12` returns `TRUE`
- `dim(schwiizerChuchiLong)` returns `c(3, 12)`
- `dim(schwiizerChuchi)` returns `c(3, 12)`
- `mean(schwiizerChuchiLong$Raclette) == 8.333`



## Tidy data: essay question

Why is this data frame not tidy, and what would you do to make it tidy? Write down your reasoning in numbered steps. You can write down some exact code, some higher-level code concepts, or in plain text.

```{r}
temp_location_data <- data.frame(
  temperature_location = c("22C_London", "18C_Paris", "25C_Rome")
)
```

```{r, echo = FALSE, include=FALSE}
# Tidying the dataset by separating the variables
tidy_temp_location <- as.data.frame(
  str_split(temp_location_data$temperature_location,
            pattern = "_",
            simplify = TRUE)
)

names(tidy_temp_location) <- c("temperature", "location")
```


## Tidy data: essay question

Why is this data frame not tidy, and what would you do to make it tidy? Write down your reasoning in numbered steps. You can write down some exact code, some higher-level code concepts, or in plain text.

```{r}
grades_data <- data.frame(
  Student = c("Johannes", "Hannah", "Igor"),
  Econ = c(5, 5.25, 4),
  DataHandling = c(4, 4.5, 5),
  Management = c(5.5, 6, 6)
)
```

<br>

```{r, echo = FALSE, include=FALSE}
tidy_grades <- grades_data %>%
  pivot_longer(cols = -Student, names_to = "Subject", values_to = "Grade")
```



# Today

## Goals of today's lecture

1. Understand the concept of merging datasets.
2. Perform basic data manipulation in `dplyr`.
3. First steps in exploratory data analysis.


# Data Preparation: merging

## Merging (Joining) datasets

- Combine data of two datasets in one dataset.
- Needed: Unique identifiers for observations ('keys').


## Merging (joining) datasets

```{r setupjoin, echo=FALSE, out.width = "60%", fig.align='center', fig.cap= 'Join setup. Source: [R4DS](https://r4ds.hadley.nz/joins).', purl=FALSE}
include_graphics("../../img/join-setup.png")
```


## Merging (joining) datasets

```{r setupjoin2, echo=FALSE, out.width = "70%", fig.align='center', fig.cap= 'Join setup. Source: [R4DS](https://r4ds.hadley.nz/joins).', purl=FALSE}
include_graphics("../../img/join-setup2.png")
```


## Merging (joining) datasets using an <span style="color:#02934a;">inner join</span>

```{r innerjoin, echo=FALSE, out.width = "90%", fig.align='center', fig.cap= 'Inner join. Source: R4DS', purl=FALSE}
include_graphics("../../img/join-inner.png")
```


## Merging (joining) datasets using a <span style="color:#02934a;">left join</span>

```{r leftjoin, echo=FALSE, out.width = "90%", fig.align='center', fig.cap= 'Left join. Source: [R4DS](https://r4ds.hadley.nz/joins).', purl=FALSE}
include_graphics("../../img/join-left.png")
```


## Merging (joining) datasets using a <span style="color:#02934a;">right join</span>

```{r rightjoin, echo=FALSE, out.width = "90%", fig.align='center', fig.cap= 'Right join. Source: [R4DS](https://r4ds.hadley.nz/joins).', purl=FALSE}
include_graphics("../../img/join-right.png")
```


## Merging all x and all y using a <span style="color:#02934a;">full join</span>

```{r fulljoin, echo=FALSE, out.width = "90%", fig.align='center', fig.cap= 'Full join. Source: [R4DS](https://r4ds.hadley.nz/joins).', purl=FALSE}
include_graphics("../../img/join-full.png")
```


## The four fundamental joins are :

```{r vennjoin, echo=FALSE, out.width = "90%", fig.align='center', fig.cap= 'Join Venn Diagramm. Source: [R4DS](https://r4ds.hadley.nz/joins).', purl=FALSE}
include_graphics("../../img/join-venn.png")
```


## Row-matching behaviors in joins

:::: {.columns}

::: {.column width="30%"}

1. "One-to-one"
2. "Many-to-many"
3. "One-to-many"
4. "Many-to-one"

<!-- one-to-one: -->
<!-- A row from x can match at most 1 row from y. -->
<!-- A row from y can match at most 1 row from x. -->
<!-- one-to-many: -->
<!-- A row from x can match any number of rows in y. -->
<!-- A row from y can match at most 1 row from x. -->
<!-- many-to-one: -->
<!-- A row from x can match at most 1 row from y. -->
<!-- A row from y can match any number of rows in x. -->
<!-- many-to-many: -->
<!-- A row from x can match any number of rows in y. -->
<!-- A row from y can match any number of rows in x. -->

::: aside
**Always check how many rows are returned after your merge!** In `tidyverse`, warnings appear in case of "many-to-many". As of `dplyr 1.1.1`, no warning for one-to-many relationships.
:::

:::

::: {.column width="70%"}

```{r , echo=FALSE, out.width = "90%", fig.align='center', fig.cap = "One-to-many joins. Source: [R4DS](https://r4ds.hadley.nz/joins)" , purl=FALSE}
include_graphics("../../img/join-rowmatching.png")
```

:::
:::: 


## Filtering joins with the <span style="color:#02934a;">semi join</span> and the <span style="color:#02934a;">anti join</span>

:::: {.columns}

::: {.column width="50%"}

```{r , echo=FALSE, out.width = "90%", fig.align='center', fig.cap= 'The semi-join keeps rows in x that have one or more matches in y. Source: [R4DS](https://r4ds.hadley.nz/joins).',  purl=FALSE}
include_graphics("../../img/join-semi.png")
```

:::

::: {.column width="50%"}

```{r , echo=FALSE, out.width = "90%", fig.align='center', fig.cap= "The anti-join keeps rows in x that match zero rows in y. Source: [R4DS](https://r4ds.hadley.nz/joins).", purl=FALSE}
include_graphics("../../img/join-anti.png")
```

:::
:::: 




## Merging (joining) datasets: example

```{r message=FALSE}
# load packages
library(tidyverse)

# initiate data frame on persons personal spending
df_c <- data.frame(id = c(1:3,1:3),
                   money_spent= c(1000, 2000, 6000, 1500, 3000, 5500),
                   currency = c("CHF", "CHF", "USD", "EUR", "CHF", "USD"),
                   year=c(2017,2017,2017,2018,2018,2018))
df_c

```


## Merging (joining) datasets: example

```{r message=FALSE}
# initiate data frame on persons' characteristics
df_p <- data.frame(id = 1:4,
                   first_name = c("Anna", "Betty", "Claire", "Diane"),
                   profession = c("Economist", "Data Scientist", 
                                  "Data Scientist", "Economist"))
df_p
```


## Merging (joining) datasets: example

```{r}
df_merged <- left_join(df_p, df_c, by="id")
df_merged
```


## Merging (joining) datasets: R

Overview by [R4DS](https://r4ds.hadley.nz/joins):

dplyr (tidyverse)  | base::merge
-------------------|-------------------------------------------
`inner_join(x, y)` | `merge(x, y)`
`left_join(x, y)`  | `merge(x, y, all.x = TRUE)`
`right_join(x, y)` | `merge(x, y, all.y = TRUE)`,
`full_join(x, y)`  | `merge(x, y, all = TRUE)`



# Transforming and cleaning data 

---

```{r, echo=FALSE, out.width = "40%", fig.align='center', purl=FALSE, fig.cap = "Source: https://www.storybench.org/wp-content/uploads/2017/05/tidyverse.png"}
include_graphics("../../img/tidyverse_pipeline.png")
```


## `select`, `filter`, `arrange`, `mutate` are the building blocks of `dplyr`

:::: {.columns}

::: {.column width="60%"}

<br>

- **Select** the subset of variables you need (e.g., for comparisons).
- **Filter** the dataset by restricting your dataset to observations needed in _this_ analysis.
- **Arrange** the dataset by reordering the rows.
- **Mutate** the dataset by adding the values you need for your analysis.
- **Group** and **summarize** the dataset by a variable to apply functions to groups of observations.

:::

::: {.column width="40%"}

```{r, echo=FALSE, out.width = "90%", fig.align='center', fig.cap = 'Source: [Intro to R for Social Scientists](https://jaspertjaden.github.io/course-intro2r/week3.html)', purl=FALSE}
include_graphics("../../img/dplyr_blocks.png")
```


:::
:::: 


## Prepare your data in a `pipe`line

- The operator has been now replaced with `|>`.


```{r magrittr, echo=FALSE, out.width = "55%", fig.align='center', purl=FALSE}
include_graphics("../../img/magrittr.png")
```



## Prepare your data in a `pipe`line with `dplyr`


:::: {.columns}

::: {.column width="50%"}

```{r, eval = FALSE}
# Traditional way
mydf <- data(swiss) 
mydf <- arrange(mydf, -Catholic)
mydf <- filter(mydf, Education > 8 & Catholic > 90)
mydf <- mutate(mydf, Country = "Switzerland")
mydf <- select(mydf, Examination)

# The pipe way
mydf <- data(swiss)  |> 
  arrange(-Catholic) |> 
  filter(Education > 8 & Catholic > 90) |> 
  mutate(Country = "Switzerland") |> 
  select(Examination)

```

:::

::: {.column width="50%"}

```{r, eval = FALSE}
# Base-R equivalent
mydf <- data(swiss) 
mydf <- mydf[order(-mydf$Catholic), ]
mydf <- mydf[mydf$Education > 8 & mydf$Catholic > 90, ]
mydf$Country <- "Switzerland"
mydf <- mydf["Examination"]






```

:::
:::: 


## Further tools for data transformation and cleaning in `dplyr`

- `forecats` to deal with factors;
- `lubridate` to deal with dates;
- `stringr` to deal with strings and regular expressions.




<!-- # A primer in linear regression/OLS (if time) -->

<!-- ## Some vocabulary and notation -->

<!-- - *Dependent variable*: $y_i$. -->
<!-- - *Explanatory variable*: $x_i$. -->
<!-- - "All the rest": $u_{i}$ (the *'residuals'* or the 'error term'). -->

<!-- $y_{i}= \alpha + \beta x_{i} + u_{i}$. -->

<!-- ## Causality? -->

<!-- ## OLS Example: data -->


<!-- ```{r eval=FALSE} -->
<!-- # load the data -->
<!-- data(swiss) -->
<!-- # look at the description -->
<!-- ?swiss -->
<!-- ``` -->

<!-- ```{r echo=FALSE, message=FALSE, warning=FALSE} -->
<!-- # load the data -->
<!-- data(swiss) -->

<!-- ``` -->

<!-- ## Research question -->

<!-- - Do more years of schooling improve educational outcomes? -->
<!-- - Approximate educational success with the variable `Education` and educational outcomes with the variable `Examination`. -->
<!-- - Make use of the simple linear model to investigate whether more schooling improves educational outcomes (on average)? -->



<!-- ## Model specification -->

<!-- $Examination_{i}= \alpha + \beta Education_{i}$, -->

<!-- - Intuitive hypothesis: $\beta$ is positive, indicating that a higher share of draftees with more years of schooling results in a higher share of draftees who reach the highest examination mark. -->
<!-- - *Problems*? -->



<!-- ## Model specification -->

<!-- To formally acknowledge that other factors might also play a role, we extend our model with the term $u_{i}$. For the moment, we thus subsume all other potentially relevant factors in that term: -->

<!-- $Examination_{i}= \alpha + \beta Education_{i} + u_{i}$. -->


<!-- ## Raw data -->


<!-- ```{r} -->
<!-- plot(swiss$Education, swiss$Examination) -->
<!-- ``` -->


<!-- ## Derivation and implementation of OLS estimator -->

<!-- From the model equation we easily see that these 'differences' between the predicted and the actual values of $y$ are the remaining unexplained component $u$: -->

<!-- $y_{i}-\hat{\alpha}-\hat{\beta} x_i=u_i$. -->

<!-- Hence, we want to minimize the *sum of squared residuals (SSR)*: $\sum{u_i^2}=\sum{(y_{i}-\hat{\alpha}-\hat{\beta} x_i)^2}$. Using calculus, we define the two first order conditions: -->

<!-- $$\frac{\partial SSR}{\partial \hat{\alpha}}=\sum{-2(y_{i}-\hat{\alpha}-\hat{\beta} x_i)}=0$$ -->

<!-- $$\frac{\partial SSR}{\partial \hat{\beta}}=\sum{-2x_i(y_{i}-\hat{\alpha}-\hat{\beta} x_i)}=0$$ -->


<!-- ## Derivation and implementation of OLS estimator -->

<!-- The first condition is relatively easily solved by getting rid of the $-2$ and considering that  $\sum{y_i}=N\bar{y}$: -->
<!-- $\hat{\alpha}=\bar{y}-\hat{\beta}\bar{x}$. -->


<!-- ## Derivation and implementation of OLS estimator -->

<!-- By plugging the solution for $\hat{\alpha}$ into the first order condition regarding $\hat{\beta}$ and again considering that $\sum{y_i}=N\bar{y}$, we get the solution for the slope coefficient estimator: -->

<!-- $\frac{\sum{x_{i}y_{i}}-N\bar{y}\bar{x}}{\sum{x_i^2}-N\bar{x}^2}$. -->


<!-- ## Implement OLS in R! -->


<!-- ```{r} -->

<!-- # implement the simple OLS estimator -->
<!-- # verify implementation with simulated data from above -->
<!-- # my_ols(y,x) -->
<!-- # should be very close to alpha=30 and beta=0.9 -->
<!-- my_ols <- -->
<!--   function(y,x) { -->
<!--     N <- length(y) -->
<!--     betahat <- (sum(y*x) - N*mean(x)*mean(y)) / (sum(x^2)-N*mean(x)^2) -->
<!--     alphahat <- mean(y)-betahat*mean(x) -->

<!--     return(list(alpha=alphahat,beta=betahat)) -->
<!--   } -->

<!-- # estimate effect of Education on Examination -->
<!-- estimates <- my_ols(swiss$Examination, swiss$Education) -->
<!-- estimates -->
<!-- ``` -->


<!-- ## Simple visualisation -->

<!-- ```{r} -->
<!-- plot(swiss$Education, swiss$Examination) -->
<!-- abline(estimates$alpha, estimates$beta, col="red") -->
<!-- ``` -->



<!-- ## Regression toolbox in R -->


<!-- ```{r} -->
<!-- estimates2 <- lm(Examination~Education, data=swiss) -->
<!-- estimates2 -->
<!-- ``` -->
<!-- With one additional line of code we can compute all the common statistics about the regression estimation: -->

<!-- ```{r} -->
<!-- summary(estimates2) -->
<!-- ``` -->




---

